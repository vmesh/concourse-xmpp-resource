#!/bin/sh

set -e

cd "$1"

exec 3>&1
exec 1>&2

PAYLOAD=$(mktemp /tmp/resource-put.XXXXXX)

cat >"$PAYLOAD" <&0



debug=$(jq -r '.source.debug // false' <"$PAYLOAD")
[ "$debug" = "true" ] && set -x

recipients="$(jq -r '.source.recipients | .[]? // empty' <"$PAYLOAD")"
rooms="$(jq -r '.source.rooms | .[]? // empty' <"$PAYLOAD")"

server="$(jq -r '.source.server // empty' <"$PAYLOAD")"
[ "$debug" = "true" ] && set +x
username="$(jq -r '.source.username // empty' <"$PAYLOAD")"
password="$(jq -r '.source.password // empty' <"$PAYLOAD")"
[ "$debug" = "true" ] && set -x

room_nick="$(jq -r '.source.room_nick // "concourse"' <"$PAYLOAD")"
skip_ssl_verification="$(jq -r '.source.skip_ssl_verification // "false"' <"$PAYLOAD")"
disable_ssl="$(jq -r '.source.disable_ssl // "false"' <"$PAYLOAD")"
ca_cert=$(jq -r '.source.ca_cert // empty' <"$PAYLOAD")

message="$(jq '.params.message // empty' <"$PAYLOAD")"
message_file="$(jq -r '.params.message_file // empty' <"$PAYLOAD")"
skip_empty="$(jq -r '.params.skip_empty // "false"' <"$PAYLOAD")"



if [ -z "$rooms" ] && [ -z "$recipients" ]; then
    echo "Missing required option: \"rooms\" or \"recipients\""
    exit 1
fi

: ${server:?Missing required option: \"server\"}
[ "$debug" = "true" ] && set +x
: ${username:?Missing required option: \"username\"}
: ${password:?Missing required option: \"password\"}
[ "$debug" = "true" ] && set -x

if [ -z "$message" ] && [ -z "$message_file" ]; then
    echo "Missing required parameter: \"message\" or \"message_file\""
    exit 1
fi

if [ -n "$message" ] && [ -n "$message_file" ]; then
    echo "Only one parameter must be specified: \"message\" or \"message_file\""
    exit 1
fi


SENDXMPP_OPTS=""

if [ -n "$ca_cert" ]; then
    cert_dir=$(mktemp -d /tmp/resource-cert.XXXXXX)
    echo "$ca_cert" >"$cert_dir/$server.crt"
    SENDXMPP_OPTS="$SENDXMPP_OPTS --tls-ca-path $cert_dir/$server.crt"
else
    # TODO See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=854210
    SENDXMPP_OPTS="$SENDXMPP_OPTS --tls-ca-path /etc/ssl/certs"
fi

if [ "$skip_ssl_verification" = "true" ]; then
    SENDXMPP_OPTS="$SENDXMPP_OPTS --no-tls-verify"
fi

if [ "$disable_ssl" = "false" ]; then
    SENDXMPP_OPTS="$SENDXMPP_OPTS --tls"
fi

if [ "$debug" = "true" ]; then
    SENDXMPP_OPTS="$SENDXMPP_OPTS --verbose"
fi

if [ -n "$message_file" ] && [ ! -f "$message_file" ]; then
    echo "$message_file file not found"
    exit 1
elif [ -n "$message_file" ]; then
    message="$(cat "$message_file")"
fi

if [ -z "$message" ]; then
    if [ "$skip_empty" = "true" ]; then
        exit 0
    else
        message="No message provided"
    fi
fi


message="$(eval printf "%b" $message)"
message_file_tmp=$(mktemp /tmp/resource-msg.XXXXXX)
echo "$message" >"$message_file_tmp"


if [ -n "$recipients" ]; then
    [ "$debug" = "true" ] && set +x
    sendxmpp $SENDXMPP_OPTS -j "$server" -u "$username" -p "$password" \
        -m "$message_file_tmp" $recipients
fi

if [ -n "$rooms" ]; then
    [ "$debug" = "true" ] && set +x
    sendxmpp $SENDXMPP_OPTS -j "$server" -u "$username" -p "$password" \
        -m "$message_file_tmp" --resource "$room_nick" --chatroom $rooms
fi


jq -n "{ version: { timestamp: \"$(date +%s)\" } }" >&3
